name: build
# on:
#   push:
#     branches: [ "main" ]

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
    
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

      - name: Step 1 Checkout code
        uses: actions/checkout@v3  
        
#       - name: Build an image from Dockerfile
#         run: |
#           docker build -t trivy-docker-image-run:${{ github.sha }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-ref: 'fs'
#           image-ref: 'trivy-docker-image-run:${{ github.sha }}'
          image-ref: 'docker-build-file'
          format: 'table'
          output: 'trivy-results-images-fs-trivy'
          security-checks: vuln,secret,config
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          
      - name: Step 3 Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.1
        if: always()        
        with:
         name: Trivy-output-artifact-images-fs
         path: trivy-results-images-fs-trivy


 
          
 
 # image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
        
#---------------------------------------------         
#       - name: Step 2 Run Trivy vulnerability scanner in fs mode
#         uses: aquasecurity/trivy-action@master
#         with:
#           scan-type: 'fs,image'
# #           image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
#           format: 'table'
#           output: 'trivy-results'
#           #exit-code: '1' 
#           severity: 'HIGH,CRITICAL'
#           security-checks: vuln,secret,config

#       - name: Step 3 Upload a Build Artifact
#         uses: actions/upload-artifact@v3.1.1
#         if: always()        
#         with:
#          name: Trivy-output-artifact 
#          path: trivy-results  
#========================================================================================
# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-20.04
#     steps:
#       - name: Step 1 Checkout code
#         uses: actions/checkout@v3


#       - name: Step  Run Trivy vulnerability scanner in repo mode
#         uses: aquasecurity/trivy-action@master
#         with:
#           scan-type: 'fs'
#           ignore-unfixed: true
#           format: 'table'
#           output: 'trivy-results.txt'
#           exit-code: '1' 
#           severity: 'MEDIUM'


# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-20.04
#     steps:
#       - name: Step 1 Checkout code
#         uses: actions/checkout@v3
        
        
# #       - name: Step 2 install trivy     
# #         run: |
# #           sudo apt-get install wget apt-transport-https gnupg lsb-release
# #           wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
# #           echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
# #           sudo apt-get update
# #           sudo apt-get install trivy
             
# #       - name: Step 3. trivy scan vulnerability fs     
# #         run:  trivy fs .
            
# #       - name: Step 4 trivy txt formate      
# #         run: sudo trivy fs -o trivy-output.txt --security-checks vuln,secret,config .
        
#       - name: Step 2 Upload a Build Artifact
#         uses: actions/upload-artifact@v3.1.1
#         with:
#          name: Trivy-output-artifact 
#          path: trivy-output.txt
                       
#       - name: Step 3 Run Trivy vulnerability scanner in repo mode
#         uses: aquasecurity/trivy-action@master
#         with:
#           scan-type: 'fs'
#           ignore-unfixed: true
#           format: 'table'
#           output: 'trivy-results.txt'
#           exit-code: '1' 
#           severity: 'HIGH, CRITICAL'
          
#       - name: Step 4 Upload a Build Artifact
#         uses: actions/upload-artifact@v3.1.1
#         with:
#          name: Trivy-output-artifact 
#          path: trivy-results.txt
 #==========================================================
# name: build
# on:
#   push:
#     branches:
#       - main
#   #pull_request:
# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-20.04
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
        
#       - name: Super-Linter
#         uses: github/super-linter@v4.9.7        




# =================== final ========================


# name: build
# on:
#   push:
#     branches:
#       - main
#   #pull_request:
# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-20.04
#     steps:
#       - name: Step 1 Checkout code
#         uses: actions/checkout@v3
        
#       - name: Step 2 install trivy     
#         run: |
#           wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb
#           sudo dpkg -i trivy_0.18.3_Linux-64bit.deb     
            
#       - name: Step 3 trivy json formate      
#         run: trivy fs -f json -o my_trivy_artifacts1.json .  
        
#       - name: Step 3.3 trivy json formate      
#         run: trivy fs .
        
#       - name: Step 4 Upload a Build Artifact
#         uses: actions/upload-artifact@v3.1.1
#         with:
#          name: outpu-json
#          path: my_trivy_artifacts1.json
         
            
#       - name: Step 5 Run Trivy vulnerability scanner in repo mode
#         uses: aquasecurity/trivy-action@master
#         with:
#           scan-type: 'fs'
#           ignore-unfixed: true
#           format: 'sarif'
#           output: 'trivy-results.sarif'
#           exit-code: '1' 
#           severity: 'HIGH,CRITICAL'
          

#       - name: Step 6 Upload Trivy scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v2
#         with:
#           sarif_file: 'trivy-results.sarif'




        

# ================ Done =========================================



#============================================================================================
# name: build
# on:
#   push:
#     branches:
#       - main
#   #pull_request:
# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-20.04
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Build an image from Dockerfile
#         run: |
#           docker build -t docker.io/my-organization/my-app:${{ github.sha }} .
#       - name: Run Trivy vulnerability scanner
#         uses: atul9372/github-action-cicd@main
#         with:
#           image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
#           format: 'table'
#           exit-code: '0'
#           ignore-unfixed: true
#           vuln-type: 'os,library'
#           severity: 'CRITICAL,HIGH'

#---------------

# ========================================================

# name: CI

# Controls when the workflow will run
# on: push
  # Triggers the workflow on push or pull request events but only for the "main" branch
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v3

#       # Runs a single command using the runners shell
#       - name: install trivy wget
#         run: wget https://github.com/aquasecurity/trivy/releases/download/v0.17.2/trivy_0.17.2_Linux-64bit.deb
#       - name: run deb file
#         run: sudo dpkg -i trivy_0.17.2_Linux-64bit.deb
      
#       - name: trivy scanning repos.
#         uses: ATUL9372/github-action-cicd@main
#         #uses: trivy repo https://github.com/ATUL9372/github-action-cicd.git     
#         with:
#           scan-type: 'repo'
#           scan-ref: '.'
#           #trivy-config: trivy-test.yaml
#           format: json
#           exit-code: 0
#           severity: CRITICAL
          
        
        
        
        
        
        
        
        
      #- name: trivy scan repo
        #run: trivy repo https://github.com/ATUL9372/github-action-cicd.git
        #trivy repo --no-progress --exit-code 0 https://github.com/ATUL9372/github-action-cicd.git
      #- name: trying to fail
       # run: exit 1
#       - name: trivy save output output.txt
#         run: |
#           echo "save output.txt"
#           trivy repo https://github.com/ATUL9372/github-action-cicd.git > output.txt
#           echo "pwd"
#           pwd
#           echo "ls -al"
#           ls -al
        
      #- name: grep output.txt
       # run: cat output.txt | grep 'LOW\|MEDIUM\|HIGH\|CRITICAL'
        
#       - name: if condition find 
 
        

